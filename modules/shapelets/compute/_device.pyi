from __future__ import annotations
from typing import Optional, Sequence, Union

from . import _pygauss


class Backend:
    """
    Represents the different types of backends
    """
    def __eq__(self, arg0: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, arg0: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, arg0: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, arg0: int) -> None: ...
    @property
    def name(self) -> str: ...
    CPU: _pygauss.Backend  
    CUDA: _pygauss.Backend  
    Default: _pygauss.Backend 
    OpenCL: _pygauss.Backend  
    __members__: dict


class DeviceInfo:
    def __repr__(self) -> str: ...
    @property
    def compute(self) -> str: ...
    @property
    def id(self) -> int: ...
    @property
    def isDoubleAvailable(self) -> bool: ...
    @property
    def isHalfAvailable(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def platform(self) -> str: ...


class DeviceMemory:
    def __repr__(self) -> str: ...
    @property
    def buffers(self) -> int: ...
    @property
    def bytes(self) -> int: ...
    @property
    def locked_buffers(self) -> int: ...
    @property
    def locked_bytes(self) -> int: ...


def device_gc() -> None: ...
def get_available_backends() -> Sequence[Backend]: ...
def get_backend() -> Backend: ...
def get_device_memory(
    dev: Optional[Union[int, DeviceInfo]] = None) -> DeviceMemory: ...


def get_device() -> DeviceInfo: ...
def get_devices() -> Sequence[DeviceInfo]: ...
def has_backend(test_backend: Backend) -> int: ...
def set_backend(arg0: Backend) -> None: ...
def set_device(arg0: Union[int, DeviceInfo]) -> bool: ...
def sync(dev: Optional[Union[int, DeviceInfo]] = None) -> None: ...
def enable_manual_eval(new_value: bool) -> None: ...
def eval(*args) -> None: ...
def manual_eval_enabled() -> bool: ...
