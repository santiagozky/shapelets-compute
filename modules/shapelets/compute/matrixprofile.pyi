from typing import List, Optional, Tuple
from .__basic_typing import ArrayLike
from ._array_obj import ShapeletsArray

class Snippet:
    @property
    def index(self) -> int: ...
    @property
    def pct(self) -> float: ...
    @property
    def distances(self) -> ShapeletsArray: ...
    @property
    def indices(self) -> ShapeletsArray: ...
    @property
    def pct(self) -> float: ... 
    @property
    def window(self) -> int: ...
    @property 
    def size(self) -> int: ... 
    def __repr__(self) -> str: ...


def mass(queries: ArrayLike, series: ArrayLike) -> ShapeletsArray: ... 

def matrix_profile(ta: ArrayLike, m: int, tb: Optional[ArrayLike] = None) -> Tuple[ShapeletsArray, ShapeletsArray]: ...

def mpdist_vect(ts: ArrayLike, tsb: ArrayLike, w: int, threshold: Optional[float] = 0.05) -> ShapeletsArray: ...

def snippets(ts: ArrayLike, snippet_size: int, num_snippets: int, window_size: Optional[int] = None) -> List[Snippet]: ...

def cac(ts: ArrayLike, index: ArrayLike, window_size: int) -> ShapeletsArray: ...