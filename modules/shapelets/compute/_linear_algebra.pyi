from typing import Optional, Union
from .__basic_typing import ArrayLike, _ScalarLike
from ._array_obj import ShapeletsArray
from . import _pygauss

AnyScalar = _ScalarLike
FloatOrComplex = Union[complex, float]

class MatrixProperties:
    def __eq__(self, arg0: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, arg0: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, arg0: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, arg0: int) -> None: ...
    @property
    def name(self) -> str: ...
    BlockDiagonal: _pygauss.MatrixProperties # value = <MatrixProperties.Symmetric: 512>
    Conjugated: _pygauss.MatrixProperties # value = <MatrixProperties.Conjugated: 4>
    ConjugatedTransposed: _pygauss.MatrixProperties # value = <MatrixProperties.ConjugatedTransposed: 2>
    Default: _pygauss.MatrixProperties # value = <MatrixProperties.Default: 0>
    Lower: _pygauss.MatrixProperties # value = <MatrixProperties.Lower: 64>
    Orthogonal: _pygauss.MatrixProperties # value = <MatrixProperties.Orthogonal: 2048>
    PositiveDefinite: _pygauss.MatrixProperties # value = <MatrixProperties.PositiveDefinite: 1024>
    Symmetric: _pygauss.MatrixProperties # value = <MatrixProperties.Symmetric: 512>
    Transposed: _pygauss.MatrixProperties # value = <MatrixProperties.Transposed: 1>
    TriDiagonal: _pygauss.MatrixProperties # value = <MatrixProperties.TriDiagonal: 4096>
    UnitDiagonal: _pygauss.MatrixProperties # value = <MatrixProperties.UnitDiagonal: 128>
    Upper: _pygauss.MatrixProperties # value = <MatrixProperties.Upper: 32>
    __members__: dict # value = {'Default': <MatrixProperties.Default: 0>, 'Transposed': <MatrixProperties.Transposed: 1>, 'ConjugatedTransposed': <MatrixProperties.ConjugatedTransposed: 2>, 'Conjugated': <MatrixProperties.Conjugated: 4>, 'Upper': <MatrixProperties.Upper: 32>, 'Lower': <MatrixProperties.Lower: 64>, 'UnitDiagonal': <MatrixProperties.UnitDiagonal: 128>, 'Symmetric': <MatrixProperties.Symmetric: 512>, 'PositiveDefinite': <MatrixProperties.PositiveDefinite: 1024>, 'Orthogonal': <MatrixProperties.Orthogonal: 2048>, 'TriDiagonal': <MatrixProperties.TriDiagonal: 4096>, 'BlockDiagonal': <MatrixProperties.Symmetric: 512>}


class NormType:
    def __eq__(self, arg0: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, arg0: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, arg0: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, arg0: int) -> None: ...
    @property
    def name(self) -> str: ...
    Euclid: _pygauss.NormType # value = <NormType.Vector2: 2>
    LPQ: _pygauss.NormType # value = <NormType.LPQ: 7>
    Matrix: _pygauss.NormType # value = <NormType.Matrix: 4>
    MatrixInf: _pygauss.NormType # value = <NormType.MatrixInf: 5>
    Singular: _pygauss.NormType # value = <NormType.Singular: 6>
    Vector1: _pygauss.NormType # value = <NormType.Vector1: 0>
    Vector2: _pygauss.NormType # value = <NormType.Vector2: 2>
    VectorInf: _pygauss.NormType # value = <NormType.VectorInf: 1>
    VectorP: _pygauss.NormType # value = <NormType.VectorP: 3>
    __members__: dict # value = {'Vector1': <NormType.Vector1: 0>, 'VectorInf': <NormType.VectorInf: 1>, 'Vector2': <NormType.Vector2: 2>, 'VectorP': <NormType.VectorP: 3>, 'Matrix': <NormType.Matrix: 4>, 'MatrixInf': <NormType.MatrixInf: 5>, 'Singular': <NormType.Singular: 6>, 'LPQ': <NormType.LPQ: 7>, 'Euclid': <NormType.Vector2: 2>}

class ConvMode:
    def __eq__(self, arg0: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, arg0: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, arg0: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, arg0: int) -> None: ...
    @property
    def name(self) -> str: ...
    Default: _pygauss.ConvMode # value = <ConvMode.Default: 0>
    Expand: _pygauss.ConvMode # value = <ConvMode.Expand: 1>
    __members__: dict # value = {'Default': <ConvMode.Default: 0>, 'Expand': <ConvMode.Expand: 1>}

class ConvDomain:
    def __eq__(self, arg0: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, arg0: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, arg0: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, arg0: int) -> None: ...
    @property
    def name(self) -> str:...
    Auto: _pygauss.ConvDomain # value = <ConvDomain.Auto: 0>
    Frequency: _pygauss.ConvDomain # value = <ConvDomain.Frequency: 2>
    Spatial: _pygauss.ConvDomain # value = <ConvDomain.Spatial: 1>
    __members__: dict # value = {'Auto': <ConvDomain.Auto: 0>, 'Frequency': <ConvDomain.Frequency: 2>, 'Spatial': <ConvDomain.Spatial: 1>}


def convolve(signal: ArrayLike, filter: ArrayLike, mode: ConvMode = ConvMode.Default, domain: ConvDomain = ConvDomain.Auto) -> ShapeletsArray: ...
def convolve1(signal: ArrayLike, filter: ArrayLike, mode: ConvMode = ConvMode.Default, domain: ConvDomain = ConvDomain.Auto) -> ShapeletsArray: ...
def convolve2(signal: ArrayLike, filter: ArrayLike, mode: ConvMode = ConvMode.Default, domain: ConvDomain = ConvDomain.Auto) -> ShapeletsArray: ...
def convolve3(signal: ArrayLike, filter: ArrayLike, mode: ConvMode = ConvMode.Default, domain: ConvDomain = ConvDomain.Auto) -> ShapeletsArray: ...

def cholesky(array_like: ArrayLike, is_upper: bool = True) -> ShapeletsArray: ...
def det(array_like: ArrayLike) -> FloatOrComplex: ...
def dot(lhs: ArrayLike, rhs: ArrayLike, conj_lhs: bool = False, conj_rhs: bool = False) -> ShapeletsArray: ...
def dot_scalar(lhs: ArrayLike, rhs: ArrayLike, conj_lhs: bool = False, conj_rhs: bool = False) -> FloatOrComplex: ...
def gemm(a: ArrayLike, b: ArrayLike, c: Optional[ArrayLike] = None, alpha: float = 1.0, beta: float = 0.0, transA: bool = False, transB: bool = False) -> ShapeletsArray: ...
def inverse(array_like: ArrayLike, options: MatrixProperties = MatrixProperties.Default) -> ShapeletsArray: ...
def lu(array_like: ArrayLike) -> tuple: ...
def matmul(lhs: ArrayLike, rhs: ArrayLike, lhs_options: MatrixProperties = MatrixProperties.Default, rhs_options: MatrixProperties = MatrixProperties.Default) -> ShapeletsArray: ...
def matmulNT(lhs: ArrayLike, rhs: ArrayLike) -> ShapeletsArray: ...
def matmulTN(lhs: ArrayLike, rhs: ArrayLike) -> ShapeletsArray: ...
def matmulTT(lhs: ArrayLike, rhs: ArrayLike) -> ShapeletsArray: ...
def matmul_chain(*args) -> ShapeletsArray: ...
def norm(array_like: ArrayLike, type: NormType = NormType.Vector2, p: float = 1.0, q: float = 1.0) -> float: ...
def pinverse(array_like: ArrayLike, tol: float = 1e-06) -> ShapeletsArray: ...
def qr(array_like: ArrayLike) -> tuple: ...
def rank(array_like: ArrayLike, tol: float = 1e-05) -> int: ...
def svd(array_like: ArrayLike) -> tuple: ...

