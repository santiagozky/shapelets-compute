from typing import Literal, Optional, Sequence, Union
from ._array_obj import ShapeletsArray
from .__basic_typing import ArrayLike

NormType = Literal["backward", "ortho", "forward"]

def fft(a: ArrayLike, n: Optional[int] = None, axis: Optional[int] = -1, norm: Optional[NormType] = None) -> ShapeletsArray:...
def ifft(a: ArrayLike, n: Optional[int] = None, axis: Optional[int] = -1, norm: Optional[NormType] = None) -> ShapeletsArray:...
def fft2(a: ArrayLike, n: Optional[Sequence[int]] = None, axis: Optional[Sequence[int]] = (-2, -1), norm: Optional[NormType] = None) -> ShapeletsArray:...
def ifft2(a: ArrayLike, n: Optional[Sequence[int]] = None, axis: Optional[Sequence[int]] = (-2, -1), norm: Optional[NormType] = None) -> ShapeletsArray:...
def fftn(a: ArrayLike, n: Optional[Sequence[int]] = None, axis: Optional[Sequence[int]] = None, norm: Optional[NormType] = None) -> ShapeletsArray:...
def ifftn(a: ArrayLike, n: Optional[Sequence[int]] = None, axis: Optional[Sequence[int]] = None, norm: Optional[NormType] = None) -> ShapeletsArray:...
def fftfreq(n: int, d: float = ...) -> ShapeletsArray: ...
def rfftfreq(n: int, d: float = ...) -> ShapeletsArray: ...

def spectral_derivative(signal: ArrayLike, kappa_spec: Union[int, float, ArrayLike] = 1.0, shift: bool = True) -> ShapeletsArray: ...
def fftshift(x: ArrayLike, axes: Union[int, Sequence[int]] = 0) -> ShapeletsArray: ...
