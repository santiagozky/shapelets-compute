from typing import Union, Optional
from .__basic_typing import ArrayLike, DataTypeLike, Backend, Shape, ShapeLike

class ParallelFor:
    def __iter__(self) -> ParallelFor: ...
    def __next__(self) -> ParallelFor: ...

class ShapeletsArray:
    def __add__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __and__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __copy__(self) -> ShapeletsArray: ...
    def __len__(self) -> int: ...
    def __deepcopy__(self, memo: object) -> ShapeletsArray: ...
    def __eq__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __ge__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __getitem__(self, selector: object) -> ShapeletsArray: ...
    def __gt__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __iadd__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __iand__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __ilshift__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __imod__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __imul__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __ior__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __ipow__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __irshift__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __isub__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __itruediv__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __ixor__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __le__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __lshift__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __lt__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __matmul__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __mod__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __mul__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __ne__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __neg__(self) -> ShapeletsArray: ...
    def __or__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __pow__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __radd__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __rand__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __repr__(self) -> str: ...
    def __rlshift__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __rmatmul__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __rmod__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __rmul__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __ror__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __rpow__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __rrshift__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __rshift__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __rsub__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __rtruediv__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __rxor__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __setitem__(self, selector: object, value: ArrayLike) -> ShapeletsArray: ...
    def __sub__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __truediv__(self, other: ArrayLike) -> ShapeletsArray: ...
    def __xor__(self, other: ArrayLike) -> ShapeletsArray: ...
    def astype(self, type: DataTypeLike) -> ShapeletsArray: ...
    def display(self, precision: int = 4) -> None: ...
    def same_as(self, arr_like: ArrayLike, eps: float = 0.0001) -> bool: ...
    def eval(self) -> None:...
    def assign(self, indices:ArrayLike, rhs: ArrayLike) -> ShapeletsArray: ...
    @property
    def real(self) -> ShapeletsArray: ...
    @property
    def imag(self) -> ShapeletsArray: ...
    @property
    def H(self) -> ShapeletsArray:...
    @property
    def T(self) -> ShapeletsArray:...
    @property
    def backend(self) -> Backend: ...
    @property
    def dtype(self) -> DataTypeLike: ...
    @property
    def is_column(self) -> bool: ...
    @property
    def is_row(self) -> bool: ...
    @property
    def is_single(self) -> bool: ...
    @property
    def is_vector(self) -> bool: ...
    @property
    def itemsize(self) -> int: ...
    @property
    def ndim(self) -> int: ...
    @property
    def shape(self) -> Shape: ...
    @property
    def size(self) -> int: ...
    __array_priority__ = 30
    __hash__ = None


def parallel_range(arg: Union[int, slice]) -> ParallelFor: ...
def array(array_like: ArrayLike, shape: Optional[ShapeLike] = None, dtype: Optional[DataTypeLike] = None) -> ShapeletsArray: ...

