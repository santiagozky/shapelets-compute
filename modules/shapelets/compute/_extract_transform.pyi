from typing import overload
from .__basic_typing import ArrayLike, Shape, DataTypeLike
from ._array_obj import ShapeletsArray
from . import _pygauss

class BorderType:
    def __eq__(self, arg0: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __init__(self, arg0: int) -> None: ...
    def __int__(self) -> int: ...
    def __ne__(self, arg0: object) -> bool: ...
    def __repr__(self) -> str: ...
    def __setstate__(self, arg0: int) -> None: ...
    @property
    def name(self) -> str:...
    ClampEdge: _pygauss.BorderType # value = <BorderType.ClampEdge: 2>
    Periodic: _pygauss.BorderType # value = <BorderType.Periodic: 3>
    Symmetric: _pygauss.BorderType # value = <BorderType.Symmetric: 1>
    Zero: _pygauss.BorderType # value = <BorderType.Zero: 0>
    __members__: dict # value = {'Zero': <BorderType.Zero: 0>, 'Symmetric': <BorderType.Symmetric: 1>, 'ClampEdge': <BorderType.ClampEdge: 2>, 'Periodic': <BorderType.Periodic: 3>}


def cast(array_like: ArrayLike, dtype: DataTypeLike) -> ShapeletsArray: ...
def flat(array_like: ArrayLike) -> ShapeletsArray: ...
def flip(array_like: ArrayLike, dimension: int = 0) -> ShapeletsArray: ...
def join(lst: list, dimension: int = 0) -> ShapeletsArray: ...
def lower(array_like: ArrayLike, unit_diag: bool = False) -> ShapeletsArray: ...
def pad(array_like: ArrayLike, begin: Shape, end: Shape, fill_type: BorderType) -> ShapeletsArray: ...
def reorder(array_like: ArrayLike, x: int, y: int = 1, z: int = 2, w: int = 3) -> ShapeletsArray: ...
def reshape(array_like: ArrayLike, shape: Shape) -> ShapeletsArray: ...
def shift(array_like: ArrayLike, x: int, y: int = 0, z: int = 0, w: int = 0) -> ShapeletsArray: ...
@overload
def tile(array_like: ArrayLike, dims: Shape) -> ShapeletsArray: ...
@overload
def tile(array_like: ArrayLike, x: int, y: int = 1, z: int = 1, w: int = 1) -> ShapeletsArray: ...
def transpose(array_like: ArrayLike, dims: bool = False) -> ShapeletsArray: ...
def upper(array_like: ArrayLike, unit_diag: bool = False) -> ShapeletsArray: ...
def where(condition: ArrayLike, x: ArrayLike = None, y: ArrayLike = None) -> ShapeletsArray: ...

def unpack(a: ArrayLike, wx: int, wy: int, sx: int, sy:int, px: int =0, py: int = 0, is_column: bool = True): ...
def pack(a: ArrayLike, ox: int, oy: int, wx: int, wy: int, sx: int, sy: int, px: int =0, py: int = 0, is_column: bool = True): ...
